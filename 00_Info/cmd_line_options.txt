# Extract from `man python3`

COMMAND LINE OPTIONS

       -B     Don't write .pyc files on import. See also PYTHONDONTWRITEBYTECODE.

       -b     Issue warnings about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str. (-bb: issue errors)

       -c command
              Specify the command to execute (see next section).  This terminates the option list (following options are passed as arguments to the command).

       -d     Turn on parser debugging output (for wizards only, depending on compilation options).

       -E     Ignore environment variables like PYTHONPATH and PYTHONHOME that modify the behavior of the interpreter.

       -h ,  -? ,  --help
              Prints the usage for the interpreter executable and exits.

       -i     When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command.  It does not read the $PYTHONSTARTUP file.  This  can  be
              useful to inspect global variables or a stack trace when a script raises an exception.

       -I     Run  Python  in  isolated  mode. This also implies -E and -s. In isolated mode sys.path contains neither the script's directory nor the user's site-packages directory. All PYTHON* environment
              variables are ignored, too.  Further restrictions may be imposed to prevent the user from injecting malicious code.

       -m module-name
              Searches sys.path for the named module and runs the corresponding .py file as a script.

       -O     Turn on basic optimizations.  Given twice, causes docstrings to be discarded.

       -OO    Discard docstrings in addition to the -O optimizations.

       -q     Do not print the version and copyright messages. These messages are also suppressed in non-interactive mode.

       -s     Don't add user site directory to sys.path.

       -S     Disable the import of the module site and the site-dependent manipulations of sys.path that it entails.  Also disable these manipulations if site is explicitly imported later.

       -u     Force the binary I/O layers of stdout and stderr to be unbuffered.  stdin is always buffered.  The text I/O layer will still be line-buffered.

       -v     Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded.  When given twice, print a message for each file  that  is  checked
              for when searching for a module.  Also provides information on module cleanup at exit.

       -V ,  --version
              Prints the Python version number of the executable and exits.

       -W argument
              Warning  control.  Python sometimes prints warning message to sys.stderr.  A typical warning message has the following form: file:line: category: message.  By default, each warning is printed
              once for each source line where it occurs.  This option controls how often warnings are printed.  Multiple -W options may be given; when a warning matches more than one option, the action for
              the  last matching option is performed.  Invalid -W options are ignored (a warning message is printed about invalid options when the first warning is issued).  Warnings can also be controlled
              from within a Python program using the warnings module.

              The simplest form of argument is one of the following action strings (or a unique abbreviation): ignore to ignore all warnings; default to explicitly request the  default  behavior  (printing
              each warning once per source line); all to print a warning each time it occurs (this may generate many messages if a warning is triggered repeatedly for the same source line, such as inside a
              loop); module to print each warning only the first time it occurs in each module; once to print each warning only the first time it occurs in the program;  or  error  to  raise  an  exception
              instead of printing a warning message.

              The  full  form  of  argument is action:message:category:module:line.  Here, action is as explained above but only applies to messages that match the remaining fields.  Empty fields match all
              values; trailing empty fields may be omitted.  The message field matches the start of the warning message printed; this match is case-insensitive.  The category field matches the warning cat‚Äê
              egory.   This must be a class name; the match test whether the actual warning category of the message is a subclass of the specified warning category.  The full class name must be given.  The
              module field matches the (fully-qualified) module name; this match is case-sensitive.  The line field matches the line number, where zero matches all line numbers and is thus equivalent to an
              omitted line number.

       -X option
              Set implementation specific option.

       -x     Skip the first line of the source.  This is intended for a DOS specific hack only.  Warning: the line numbers in error messages will be off by one!

